Terminals unused in grammar

    ":="
    "-"
    "/"
    "("
    ")"
    ASCII
    EQU


Grammar

    0 $accept: program "end of file"

    1 program: program line
    2        | line
    3        | "end of file"

    4 line: directive
    5     | instruction
    6     | jump

    7 directive: GLOBAL symbol_list
    8          | EXTERN symbol_list
    9          | SECTION SYMBOL
   10          | WORD label_list
   11          | SKIP LITERAL
   12          | END

   13 symbol_list: symbol_list "," SYMBOL
   14            | SYMBOL

   15 label_list: label_list "," SYMBOL
   16           | label_list "," LITERAL
   17           | LITERAL
   18           | SYMBOL

   19 jump: JMP jump_operand
   20     | JEQ jump_operand
   21     | JNE jump_operand
   22     | JGT jump_operand

   23 jump_operand: LITERAL
   24             | SYMBOL
   25             | "%" SYMBOL
   26             | "*" LITERAL
   27             | "*" SYMBOL
   28             | "*" REGISTER
   29             | "*" "[" REGISTER "]"
   30             | "*" "[" REGISTER "+" LITERAL "]"
   31             | "*" "[" REGISTER "+" SYMBOL "]"

   32 instruction: two_argument_instructions
   33            | one_argument_instructions
   34            | zero_argument_instructions

   35 two_argument_instructions: load_store_instructions
   36                          | instruction_type REGISTER "," REGISTER

   37 load_store_instructions: load_store REGISTER "," "$" LITERAL
   38                        | load_store REGISTER "," "$" SYMBOL
   39                        | load_store REGISTER "," LITERAL
   40                        | load_store REGISTER "," SYMBOL
   41                        | load_store REGISTER "," "%" SYMBOL
   42                        | load_store REGISTER "," REGISTER
   43                        | load_store REGISTER "," "[" REGISTER "]"
   44                        | load_store REGISTER "," "[" REGISTER "+" SYMBOL "]"
   45                        | load_store REGISTER "," "[" REGISTER "+" LITERAL "]"

   46 load_store: LDR
   47           | STR

   48 instruction_type: SHL
   49                 | SHR
   50                 | TEST
   51                 | XOR
   52                 | OR
   53                 | AND
   54                 | CMP
   55                 | DIV
   56                 | MUL
   57                 | SUB
   58                 | ADD
   59                 | XCHG

   60 one_argument_instructions: POP REGISTER
   61                          | PUSH REGISTER
   62                          | NOT REGISTER
   63                          | INT REGISTER
   64                          | CALL REGISTER

   65 zero_argument_instructions: RET
   66                           | IRET
   67                           | HALT


Terminals, with rules where they appear

    "end of file" (0) 0 3
    error (256)
    ":=" (258)
    "-" (259)
    "+" (260) 30 31 44 45
    "*" (261) 26 27 28 29 30 31
    "/" (262)
    "(" (263)
    ")" (264)
    "," (265) 13 15 16 36 37 38 39 40 41 42 43 44 45
    "$" (266) 37 38
    "%" (267) 25 41
    "[" (268) 29 30 31 43 44 45
    "]" (269) 29 30 31 43 44 45
    GLOBAL (270) 7
    EXTERN (271) 8
    SECTION (272) 9
    WORD (273) 10
    SKIP (274) 11
    ASCII (275)
    EQU (276)
    END (277) 12
    LITERAL <string> (278) 11 16 17 23 26 30 37 39 45
    SYMBOL <string> (279) 9 13 14 15 18 24 25 27 31 38 40 41 44
    REGISTER <string> (280) 28 29 30 31 36 37 38 39 40 41 42 43 44 45 60 61 62 63 64
    HALT (281) 67
    INT (282) 63
    IRET (283) 66
    RET (284) 65
    CALL (285) 64
    JMP (286) 19
    JEQ (287) 20
    JNE (288) 21
    JGT (289) 22
    PUSH (290) 61
    POP (291) 60
    XCHG (292) 59
    ADD (293) 58
    SUB (294) 57
    DIV (295) 55
    MUL (296) 56
    CMP (297) 54
    NOT (298) 62
    AND (299) 53
    OR (300) 52
    XOR (301) 51
    TEST (302) 50
    SHL (303) 48
    SHR (304) 49
    LDR (305) 46
    STR (306) 47


Nonterminals, with rules where they appear

    $accept (52)
        on left: 0
    program (53)
        on left: 1 2 3
        on right: 0 1
    line (54)
        on left: 4 5 6
        on right: 1 2
    directive <Directive*> (55)
        on left: 7 8 9 10 11 12
        on right: 4
    instruction <Instruction*> (56)
        on left: 32 33 34
        on right: 5
    load_store_instructions <Instruction*> (57)
        on left: 37 38 39 40 41 42 43 44 45
        on right: 35
    two_argument_instructions <Instruction*> (58)
        on left: 35 36
        on right: 32
    one_argument_instructions <Instruction*> (59)
        on left: 60 61 62 63 64
        on right: 33
    zero_argument_instructions <Instruction*> (60)
        on left: 65 66 67
        on right: 34
    jump_operand <Jump*> (61)
        on left: 23 24 25 26 27 28 29 30 31
        on right: 19 20 21 22
    jump <Jump*> (62)
        on left: 19 20 21 22
        on right: 6
    symbol_list <vector<string>> (63)
        on left: 13 14
        on right: 7 8 13
    label_list <Directive*> (64)
        on left: 15 16 17 18
        on right: 10 15 16
    load_store <Instruction_type> (65)
        on left: 46 47
        on right: 37 38 39 40 41 42 43 44 45
    instruction_type <Instruction_type> (66)
        on left: 48 49 50 51 52 53 54 55 56 57 58 59
        on right: 36


State 0

    0 $accept: . program "end of file"

    "end of file"  shift, and go to state 1
    GLOBAL         shift, and go to state 2
    EXTERN         shift, and go to state 3
    SECTION        shift, and go to state 4
    WORD           shift, and go to state 5
    SKIP           shift, and go to state 6
    END            shift, and go to state 7
    HALT           shift, and go to state 8
    INT            shift, and go to state 9
    IRET           shift, and go to state 10
    RET            shift, and go to state 11
    CALL           shift, and go to state 12
    JMP            shift, and go to state 13
    JEQ            shift, and go to state 14
    JNE            shift, and go to state 15
    JGT            shift, and go to state 16
    PUSH           shift, and go to state 17
    POP            shift, and go to state 18
    XCHG           shift, and go to state 19
    ADD            shift, and go to state 20
    SUB            shift, and go to state 21
    DIV            shift, and go to state 22
    MUL            shift, and go to state 23
    CMP            shift, and go to state 24
    NOT            shift, and go to state 25
    AND            shift, and go to state 26
    OR             shift, and go to state 27
    XOR            shift, and go to state 28
    TEST           shift, and go to state 29
    SHL            shift, and go to state 30
    SHR            shift, and go to state 31
    LDR            shift, and go to state 32
    STR            shift, and go to state 33

    program                     go to state 34
    line                        go to state 35
    directive                   go to state 36
    instruction                 go to state 37
    load_store_instructions     go to state 38
    two_argument_instructions   go to state 39
    one_argument_instructions   go to state 40
    zero_argument_instructions  go to state 41
    jump                        go to state 42
    load_store                  go to state 43
    instruction_type            go to state 44


State 1

    3 program: "end of file" .

    $default  reduce using rule 3 (program)


State 2

    7 directive: GLOBAL . symbol_list

    SYMBOL  shift, and go to state 45

    symbol_list  go to state 46


State 3

    8 directive: EXTERN . symbol_list

    SYMBOL  shift, and go to state 45

    symbol_list  go to state 47


State 4

    9 directive: SECTION . SYMBOL

    SYMBOL  shift, and go to state 48


State 5

   10 directive: WORD . label_list

    LITERAL  shift, and go to state 49
    SYMBOL   shift, and go to state 50

    label_list  go to state 51


State 6

   11 directive: SKIP . LITERAL

    LITERAL  shift, and go to state 52


State 7

   12 directive: END .

    $default  reduce using rule 12 (directive)


State 8

   67 zero_argument_instructions: HALT .

    $default  reduce using rule 67 (zero_argument_instructions)


State 9

   63 one_argument_instructions: INT . REGISTER

    REGISTER  shift, and go to state 53


State 10

   66 zero_argument_instructions: IRET .

    $default  reduce using rule 66 (zero_argument_instructions)


State 11

   65 zero_argument_instructions: RET .

    $default  reduce using rule 65 (zero_argument_instructions)


State 12

   64 one_argument_instructions: CALL . REGISTER

    REGISTER  shift, and go to state 54


State 13

   19 jump: JMP . jump_operand

    "*"      shift, and go to state 55
    "%"      shift, and go to state 56
    LITERAL  shift, and go to state 57
    SYMBOL   shift, and go to state 58

    jump_operand  go to state 59


State 14

   20 jump: JEQ . jump_operand

    "*"      shift, and go to state 55
    "%"      shift, and go to state 56
    LITERAL  shift, and go to state 57
    SYMBOL   shift, and go to state 58

    jump_operand  go to state 60


State 15

   21 jump: JNE . jump_operand

    "*"      shift, and go to state 55
    "%"      shift, and go to state 56
    LITERAL  shift, and go to state 57
    SYMBOL   shift, and go to state 58

    jump_operand  go to state 61


State 16

   22 jump: JGT . jump_operand

    "*"      shift, and go to state 55
    "%"      shift, and go to state 56
    LITERAL  shift, and go to state 57
    SYMBOL   shift, and go to state 58

    jump_operand  go to state 62


State 17

   61 one_argument_instructions: PUSH . REGISTER

    REGISTER  shift, and go to state 63


State 18

   60 one_argument_instructions: POP . REGISTER

    REGISTER  shift, and go to state 64


State 19

   59 instruction_type: XCHG .

    $default  reduce using rule 59 (instruction_type)


State 20

   58 instruction_type: ADD .

    $default  reduce using rule 58 (instruction_type)


State 21

   57 instruction_type: SUB .

    $default  reduce using rule 57 (instruction_type)


State 22

   55 instruction_type: DIV .

    $default  reduce using rule 55 (instruction_type)


State 23

   56 instruction_type: MUL .

    $default  reduce using rule 56 (instruction_type)


State 24

   54 instruction_type: CMP .

    $default  reduce using rule 54 (instruction_type)


State 25

   62 one_argument_instructions: NOT . REGISTER

    REGISTER  shift, and go to state 65


State 26

   53 instruction_type: AND .

    $default  reduce using rule 53 (instruction_type)


State 27

   52 instruction_type: OR .

    $default  reduce using rule 52 (instruction_type)


State 28

   51 instruction_type: XOR .

    $default  reduce using rule 51 (instruction_type)


State 29

   50 instruction_type: TEST .

    $default  reduce using rule 50 (instruction_type)


State 30

   48 instruction_type: SHL .

    $default  reduce using rule 48 (instruction_type)


State 31

   49 instruction_type: SHR .

    $default  reduce using rule 49 (instruction_type)


State 32

   46 load_store: LDR .

    $default  reduce using rule 46 (load_store)


State 33

   47 load_store: STR .

    $default  reduce using rule 47 (load_store)


State 34

    0 $accept: program . "end of file"
    1 program: program . line

    "end of file"  shift, and go to state 66
    GLOBAL         shift, and go to state 2
    EXTERN         shift, and go to state 3
    SECTION        shift, and go to state 4
    WORD           shift, and go to state 5
    SKIP           shift, and go to state 6
    END            shift, and go to state 7
    HALT           shift, and go to state 8
    INT            shift, and go to state 9
    IRET           shift, and go to state 10
    RET            shift, and go to state 11
    CALL           shift, and go to state 12
    JMP            shift, and go to state 13
    JEQ            shift, and go to state 14
    JNE            shift, and go to state 15
    JGT            shift, and go to state 16
    PUSH           shift, and go to state 17
    POP            shift, and go to state 18
    XCHG           shift, and go to state 19
    ADD            shift, and go to state 20
    SUB            shift, and go to state 21
    DIV            shift, and go to state 22
    MUL            shift, and go to state 23
    CMP            shift, and go to state 24
    NOT            shift, and go to state 25
    AND            shift, and go to state 26
    OR             shift, and go to state 27
    XOR            shift, and go to state 28
    TEST           shift, and go to state 29
    SHL            shift, and go to state 30
    SHR            shift, and go to state 31
    LDR            shift, and go to state 32
    STR            shift, and go to state 33

    line                        go to state 67
    directive                   go to state 36
    instruction                 go to state 37
    load_store_instructions     go to state 38
    two_argument_instructions   go to state 39
    one_argument_instructions   go to state 40
    zero_argument_instructions  go to state 41
    jump                        go to state 42
    load_store                  go to state 43
    instruction_type            go to state 44


State 35

    2 program: line .

    $default  reduce using rule 2 (program)


State 36

    4 line: directive .

    $default  reduce using rule 4 (line)


State 37

    5 line: instruction .

    $default  reduce using rule 5 (line)


State 38

   35 two_argument_instructions: load_store_instructions .

    $default  reduce using rule 35 (two_argument_instructions)


State 39

   32 instruction: two_argument_instructions .

    $default  reduce using rule 32 (instruction)


State 40

   33 instruction: one_argument_instructions .

    $default  reduce using rule 33 (instruction)


State 41

   34 instruction: zero_argument_instructions .

    $default  reduce using rule 34 (instruction)


State 42

    6 line: jump .

    $default  reduce using rule 6 (line)


State 43

   37 load_store_instructions: load_store . REGISTER "," "$" LITERAL
   38                        | load_store . REGISTER "," "$" SYMBOL
   39                        | load_store . REGISTER "," LITERAL
   40                        | load_store . REGISTER "," SYMBOL
   41                        | load_store . REGISTER "," "%" SYMBOL
   42                        | load_store . REGISTER "," REGISTER
   43                        | load_store . REGISTER "," "[" REGISTER "]"
   44                        | load_store . REGISTER "," "[" REGISTER "+" SYMBOL "]"
   45                        | load_store . REGISTER "," "[" REGISTER "+" LITERAL "]"

    REGISTER  shift, and go to state 68


State 44

   36 two_argument_instructions: instruction_type . REGISTER "," REGISTER

    REGISTER  shift, and go to state 69


State 45

   14 symbol_list: SYMBOL .

    $default  reduce using rule 14 (symbol_list)


State 46

    7 directive: GLOBAL symbol_list .
   13 symbol_list: symbol_list . "," SYMBOL

    ","  shift, and go to state 70

    $default  reduce using rule 7 (directive)


State 47

    8 directive: EXTERN symbol_list .
   13 symbol_list: symbol_list . "," SYMBOL

    ","  shift, and go to state 70

    $default  reduce using rule 8 (directive)


State 48

    9 directive: SECTION SYMBOL .

    $default  reduce using rule 9 (directive)


State 49

   17 label_list: LITERAL .

    $default  reduce using rule 17 (label_list)


State 50

   18 label_list: SYMBOL .

    $default  reduce using rule 18 (label_list)


State 51

   10 directive: WORD label_list .
   15 label_list: label_list . "," SYMBOL
   16           | label_list . "," LITERAL

    ","  shift, and go to state 71

    $default  reduce using rule 10 (directive)


State 52

   11 directive: SKIP LITERAL .

    $default  reduce using rule 11 (directive)


State 53

   63 one_argument_instructions: INT REGISTER .

    $default  reduce using rule 63 (one_argument_instructions)


State 54

   64 one_argument_instructions: CALL REGISTER .

    $default  reduce using rule 64 (one_argument_instructions)


State 55

   26 jump_operand: "*" . LITERAL
   27             | "*" . SYMBOL
   28             | "*" . REGISTER
   29             | "*" . "[" REGISTER "]"
   30             | "*" . "[" REGISTER "+" LITERAL "]"
   31             | "*" . "[" REGISTER "+" SYMBOL "]"

    "["       shift, and go to state 72
    LITERAL   shift, and go to state 73
    SYMBOL    shift, and go to state 74
    REGISTER  shift, and go to state 75


State 56

   25 jump_operand: "%" . SYMBOL

    SYMBOL  shift, and go to state 76


State 57

   23 jump_operand: LITERAL .

    $default  reduce using rule 23 (jump_operand)


State 58

   24 jump_operand: SYMBOL .

    $default  reduce using rule 24 (jump_operand)


State 59

   19 jump: JMP jump_operand .

    $default  reduce using rule 19 (jump)


State 60

   20 jump: JEQ jump_operand .

    $default  reduce using rule 20 (jump)


State 61

   21 jump: JNE jump_operand .

    $default  reduce using rule 21 (jump)


State 62

   22 jump: JGT jump_operand .

    $default  reduce using rule 22 (jump)


State 63

   61 one_argument_instructions: PUSH REGISTER .

    $default  reduce using rule 61 (one_argument_instructions)


State 64

   60 one_argument_instructions: POP REGISTER .

    $default  reduce using rule 60 (one_argument_instructions)


State 65

   62 one_argument_instructions: NOT REGISTER .

    $default  reduce using rule 62 (one_argument_instructions)


State 66

    0 $accept: program "end of file" .

    $default  accept


State 67

    1 program: program line .

    $default  reduce using rule 1 (program)


State 68

   37 load_store_instructions: load_store REGISTER . "," "$" LITERAL
   38                        | load_store REGISTER . "," "$" SYMBOL
   39                        | load_store REGISTER . "," LITERAL
   40                        | load_store REGISTER . "," SYMBOL
   41                        | load_store REGISTER . "," "%" SYMBOL
   42                        | load_store REGISTER . "," REGISTER
   43                        | load_store REGISTER . "," "[" REGISTER "]"
   44                        | load_store REGISTER . "," "[" REGISTER "+" SYMBOL "]"
   45                        | load_store REGISTER . "," "[" REGISTER "+" LITERAL "]"

    ","  shift, and go to state 77


State 69

   36 two_argument_instructions: instruction_type REGISTER . "," REGISTER

    ","  shift, and go to state 78


State 70

   13 symbol_list: symbol_list "," . SYMBOL

    SYMBOL  shift, and go to state 79


State 71

   15 label_list: label_list "," . SYMBOL
   16           | label_list "," . LITERAL

    LITERAL  shift, and go to state 80
    SYMBOL   shift, and go to state 81


State 72

   29 jump_operand: "*" "[" . REGISTER "]"
   30             | "*" "[" . REGISTER "+" LITERAL "]"
   31             | "*" "[" . REGISTER "+" SYMBOL "]"

    REGISTER  shift, and go to state 82


State 73

   26 jump_operand: "*" LITERAL .

    $default  reduce using rule 26 (jump_operand)


State 74

   27 jump_operand: "*" SYMBOL .

    $default  reduce using rule 27 (jump_operand)


State 75

   28 jump_operand: "*" REGISTER .

    $default  reduce using rule 28 (jump_operand)


State 76

   25 jump_operand: "%" SYMBOL .

    $default  reduce using rule 25 (jump_operand)


State 77

   37 load_store_instructions: load_store REGISTER "," . "$" LITERAL
   38                        | load_store REGISTER "," . "$" SYMBOL
   39                        | load_store REGISTER "," . LITERAL
   40                        | load_store REGISTER "," . SYMBOL
   41                        | load_store REGISTER "," . "%" SYMBOL
   42                        | load_store REGISTER "," . REGISTER
   43                        | load_store REGISTER "," . "[" REGISTER "]"
   44                        | load_store REGISTER "," . "[" REGISTER "+" SYMBOL "]"
   45                        | load_store REGISTER "," . "[" REGISTER "+" LITERAL "]"

    "$"       shift, and go to state 83
    "%"       shift, and go to state 84
    "["       shift, and go to state 85
    LITERAL   shift, and go to state 86
    SYMBOL    shift, and go to state 87
    REGISTER  shift, and go to state 88


State 78

   36 two_argument_instructions: instruction_type REGISTER "," . REGISTER

    REGISTER  shift, and go to state 89


State 79

   13 symbol_list: symbol_list "," SYMBOL .

    $default  reduce using rule 13 (symbol_list)


State 80

   16 label_list: label_list "," LITERAL .

    $default  reduce using rule 16 (label_list)


State 81

   15 label_list: label_list "," SYMBOL .

    $default  reduce using rule 15 (label_list)


State 82

   29 jump_operand: "*" "[" REGISTER . "]"
   30             | "*" "[" REGISTER . "+" LITERAL "]"
   31             | "*" "[" REGISTER . "+" SYMBOL "]"

    "+"  shift, and go to state 90
    "]"  shift, and go to state 91


State 83

   37 load_store_instructions: load_store REGISTER "," "$" . LITERAL
   38                        | load_store REGISTER "," "$" . SYMBOL

    LITERAL  shift, and go to state 92
    SYMBOL   shift, and go to state 93


State 84

   41 load_store_instructions: load_store REGISTER "," "%" . SYMBOL

    SYMBOL  shift, and go to state 94


State 85

   43 load_store_instructions: load_store REGISTER "," "[" . REGISTER "]"
   44                        | load_store REGISTER "," "[" . REGISTER "+" SYMBOL "]"
   45                        | load_store REGISTER "," "[" . REGISTER "+" LITERAL "]"

    REGISTER  shift, and go to state 95


State 86

   39 load_store_instructions: load_store REGISTER "," LITERAL .

    $default  reduce using rule 39 (load_store_instructions)


State 87

   40 load_store_instructions: load_store REGISTER "," SYMBOL .

    $default  reduce using rule 40 (load_store_instructions)


State 88

   42 load_store_instructions: load_store REGISTER "," REGISTER .

    $default  reduce using rule 42 (load_store_instructions)


State 89

   36 two_argument_instructions: instruction_type REGISTER "," REGISTER .

    $default  reduce using rule 36 (two_argument_instructions)


State 90

   30 jump_operand: "*" "[" REGISTER "+" . LITERAL "]"
   31             | "*" "[" REGISTER "+" . SYMBOL "]"

    LITERAL  shift, and go to state 96
    SYMBOL   shift, and go to state 97


State 91

   29 jump_operand: "*" "[" REGISTER "]" .

    $default  reduce using rule 29 (jump_operand)


State 92

   37 load_store_instructions: load_store REGISTER "," "$" LITERAL .

    $default  reduce using rule 37 (load_store_instructions)


State 93

   38 load_store_instructions: load_store REGISTER "," "$" SYMBOL .

    $default  reduce using rule 38 (load_store_instructions)


State 94

   41 load_store_instructions: load_store REGISTER "," "%" SYMBOL .

    $default  reduce using rule 41 (load_store_instructions)


State 95

   43 load_store_instructions: load_store REGISTER "," "[" REGISTER . "]"
   44                        | load_store REGISTER "," "[" REGISTER . "+" SYMBOL "]"
   45                        | load_store REGISTER "," "[" REGISTER . "+" LITERAL "]"

    "+"  shift, and go to state 98
    "]"  shift, and go to state 99


State 96

   30 jump_operand: "*" "[" REGISTER "+" LITERAL . "]"

    "]"  shift, and go to state 100


State 97

   31 jump_operand: "*" "[" REGISTER "+" SYMBOL . "]"

    "]"  shift, and go to state 101


State 98

   44 load_store_instructions: load_store REGISTER "," "[" REGISTER "+" . SYMBOL "]"
   45                        | load_store REGISTER "," "[" REGISTER "+" . LITERAL "]"

    LITERAL  shift, and go to state 102
    SYMBOL   shift, and go to state 103


State 99

   43 load_store_instructions: load_store REGISTER "," "[" REGISTER "]" .

    $default  reduce using rule 43 (load_store_instructions)


State 100

   30 jump_operand: "*" "[" REGISTER "+" LITERAL "]" .

    $default  reduce using rule 30 (jump_operand)


State 101

   31 jump_operand: "*" "[" REGISTER "+" SYMBOL "]" .

    $default  reduce using rule 31 (jump_operand)


State 102

   45 load_store_instructions: load_store REGISTER "," "[" REGISTER "+" LITERAL . "]"

    "]"  shift, and go to state 104


State 103

   44 load_store_instructions: load_store REGISTER "," "[" REGISTER "+" SYMBOL . "]"

    "]"  shift, and go to state 105


State 104

   45 load_store_instructions: load_store REGISTER "," "[" REGISTER "+" LITERAL "]" .

    $default  reduce using rule 45 (load_store_instructions)


State 105

   44 load_store_instructions: load_store REGISTER "," "[" REGISTER "+" SYMBOL "]" .

    $default  reduce using rule 44 (load_store_instructions)
