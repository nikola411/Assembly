Terminals unused in grammar

    ":="
    "-"
    "/"
    "("
    ")"
    "#"


Grammar

    0 $accept: program "end of file"

    1 program: program line
    2        | line
    3        | "end of file"

    4 line: directive
    5     | instruction
    6     | jump
    7     | COMMENT

    8 directive: GLOBAL symbol_list
    9          | EXTERN symbol_list
   10          | SECTION SYMBOL
   11          | WORD label_list
   12          | SKIP LITERAL
   13          | END
   14          | SYMBOL ":"
   15          | EQU SYMBOL "," LITERAL
   16          | ASCII

   17 symbol_list: symbol_list "," SYMBOL
   18            | SYMBOL

   19 label_list: label_list "," SYMBOL
   20           | label_list "," LITERAL
   21           | LITERAL
   22           | SYMBOL

   23 jump: JMP jump_operand
   24     | JEQ jump_operand
   25     | JNE jump_operand
   26     | JGT jump_operand

   27 jump_operand: LITERAL
   28             | SYMBOL
   29             | "%" SYMBOL
   30             | "*" LITERAL
   31             | "*" SYMBOL
   32             | "*" REGISTER
   33             | "*" "[" REGISTER "]"
   34             | "*" "[" REGISTER "+" LITERAL "]"
   35             | "*" "[" REGISTER "+" SYMBOL "]"

   36 instruction: two_operand_instructions
   37            | one_operand_instructions
   38            | zero_operand_instructions

   39 two_operand_instructions: load_store_instructions
   40                         | instruction_type REGISTER "," REGISTER

   41 load_store_instructions: load_store REGISTER "," operand

   42 operand: "$" LITERAL
   43        | "$" SYMBOL
   44        | "%" SYMBOL
   45        | LITERAL
   46        | SYMBOL
   47        | REGISTER
   48        | "[" REGISTER "]"
   49        | "[" REGISTER "+" LITERAL "]"
   50        | "[" REGISTER "+" SYMBOL "]"

   51 load_store: LDR
   52           | STR

   53 instruction_type: SHL
   54                 | SHR
   55                 | TEST
   56                 | XOR
   57                 | OR
   58                 | AND
   59                 | CMP
   60                 | DIV
   61                 | MUL
   62                 | SUB
   63                 | ADD
   64                 | XCHG

   65 one_operand_instructions: POP REGISTER
   66                         | PUSH REGISTER
   67                         | NOT REGISTER
   68                         | INT REGISTER
   69                         | CALL operand

   70 zero_operand_instructions: RET
   71                          | IRET
   72                          | HALT


Terminals, with rules where they appear

    "end of file" (0) 0 3
    error (256)
    ":=" (258)
    "-" (259)
    "+" (260) 34 35 49 50
    "*" (261) 30 31 32 33 34 35
    "/" (262)
    "(" (263)
    ")" (264)
    "," (265) 15 17 19 20 40 41
    "$" (266) 42 43
    "%" (267) 29 44
    "[" (268) 33 34 35 48 49 50
    "]" (269) 33 34 35 48 49 50
    ":" (270) 14
    "#" (271)
    GLOBAL (272) 8
    EXTERN (273) 9
    SECTION (274) 10
    WORD (275) 11
    SKIP (276) 12
    ASCII (277) 16
    EQU (278) 15
    END (279) 13
    LITERAL <string> (280) 12 15 20 21 27 30 34 42 45 49
    SYMBOL <string> (281) 10 14 15 17 18 19 22 28 29 31 35 43 44 46 50
    REGISTER <string> (282) 32 33 34 35 40 41 47 48 49 50 65 66 67 68
    HALT (283) 72
    INT (284) 68
    IRET (285) 71
    RET (286) 70
    CALL (287) 69
    JMP (288) 23
    JEQ (289) 24
    JNE (290) 25
    JGT (291) 26
    PUSH (292) 66
    POP (293) 65
    XCHG (294) 64
    ADD (295) 63
    SUB (296) 62
    DIV (297) 60
    MUL (298) 61
    CMP (299) 59
    NOT (300) 67
    AND (301) 58
    OR (302) 57
    XOR (303) 56
    TEST (304) 55
    SHL (305) 53
    SHR (306) 54
    LDR (307) 51
    STR (308) 52
    COMMENT <string> (309) 7


Nonterminals, with rules where they appear

    $accept (55)
        on left: 0
    program (56)
        on left: 1 2 3
        on right: 0 1
    line (57)
        on left: 4 5 6 7
        on right: 1 2
    directive <Directive*> (58)
        on left: 8 9 10 11 12 13 14 15 16
        on right: 4
    instruction <Instruction*> (59)
        on left: 36 37 38
        on right: 5
    load_store_instructions <Instruction*> (60)
        on left: 41
        on right: 39
    two_operand_instructions <Instruction*> (61)
        on left: 39 40
        on right: 36
    one_operand_instructions <Instruction*> (62)
        on left: 65 66 67 68 69
        on right: 37
    zero_operand_instructions <Instruction*> (63)
        on left: 70 71 72
        on right: 38
    jump_operand <Jump*> (64)
        on left: 27 28 29 30 31 32 33 34 35
        on right: 23 24 25 26
    jump <Jump*> (65)
        on left: 23 24 25 26
        on right: 6
    symbol_list <vector<string>> (66)
        on left: 17 18
        on right: 8 9 17
    label_list <Directive*> (67)
        on left: 19 20 21 22
        on right: 11 19 20
    load_store <Instruction_type> (68)
        on left: 51 52
        on right: 41
    instruction_type <Instruction_type> (69)
        on left: 53 54 55 56 57 58 59 60 61 62 63 64
        on right: 40
    operand <Instruction*> (70)
        on left: 42 43 44 45 46 47 48 49 50
        on right: 41 69


State 0

    0 $accept: . program "end of file"

    "end of file"  shift, and go to state 1
    GLOBAL         shift, and go to state 2
    EXTERN         shift, and go to state 3
    SECTION        shift, and go to state 4
    WORD           shift, and go to state 5
    SKIP           shift, and go to state 6
    ASCII          shift, and go to state 7
    EQU            shift, and go to state 8
    END            shift, and go to state 9
    SYMBOL         shift, and go to state 10
    HALT           shift, and go to state 11
    INT            shift, and go to state 12
    IRET           shift, and go to state 13
    RET            shift, and go to state 14
    CALL           shift, and go to state 15
    JMP            shift, and go to state 16
    JEQ            shift, and go to state 17
    JNE            shift, and go to state 18
    JGT            shift, and go to state 19
    PUSH           shift, and go to state 20
    POP            shift, and go to state 21
    XCHG           shift, and go to state 22
    ADD            shift, and go to state 23
    SUB            shift, and go to state 24
    DIV            shift, and go to state 25
    MUL            shift, and go to state 26
    CMP            shift, and go to state 27
    NOT            shift, and go to state 28
    AND            shift, and go to state 29
    OR             shift, and go to state 30
    XOR            shift, and go to state 31
    TEST           shift, and go to state 32
    SHL            shift, and go to state 33
    SHR            shift, and go to state 34
    LDR            shift, and go to state 35
    STR            shift, and go to state 36
    COMMENT        shift, and go to state 37

    program                    go to state 38
    line                       go to state 39
    directive                  go to state 40
    instruction                go to state 41
    load_store_instructions    go to state 42
    two_operand_instructions   go to state 43
    one_operand_instructions   go to state 44
    zero_operand_instructions  go to state 45
    jump                       go to state 46
    load_store                 go to state 47
    instruction_type           go to state 48


State 1

    3 program: "end of file" .

    $default  reduce using rule 3 (program)


State 2

    8 directive: GLOBAL . symbol_list

    SYMBOL  shift, and go to state 49

    symbol_list  go to state 50


State 3

    9 directive: EXTERN . symbol_list

    SYMBOL  shift, and go to state 49

    symbol_list  go to state 51


State 4

   10 directive: SECTION . SYMBOL

    SYMBOL  shift, and go to state 52


State 5

   11 directive: WORD . label_list

    LITERAL  shift, and go to state 53
    SYMBOL   shift, and go to state 54

    label_list  go to state 55


State 6

   12 directive: SKIP . LITERAL

    LITERAL  shift, and go to state 56


State 7

   16 directive: ASCII .

    $default  reduce using rule 16 (directive)


State 8

   15 directive: EQU . SYMBOL "," LITERAL

    SYMBOL  shift, and go to state 57


State 9

   13 directive: END .

    $default  reduce using rule 13 (directive)


State 10

   14 directive: SYMBOL . ":"

    ":"  shift, and go to state 58


State 11

   72 zero_operand_instructions: HALT .

    $default  reduce using rule 72 (zero_operand_instructions)


State 12

   68 one_operand_instructions: INT . REGISTER

    REGISTER  shift, and go to state 59


State 13

   71 zero_operand_instructions: IRET .

    $default  reduce using rule 71 (zero_operand_instructions)


State 14

   70 zero_operand_instructions: RET .

    $default  reduce using rule 70 (zero_operand_instructions)


State 15

   69 one_operand_instructions: CALL . operand

    "$"       shift, and go to state 60
    "%"       shift, and go to state 61
    "["       shift, and go to state 62
    LITERAL   shift, and go to state 63
    SYMBOL    shift, and go to state 64
    REGISTER  shift, and go to state 65

    operand  go to state 66


State 16

   23 jump: JMP . jump_operand

    "*"      shift, and go to state 67
    "%"      shift, and go to state 68
    LITERAL  shift, and go to state 69
    SYMBOL   shift, and go to state 70

    jump_operand  go to state 71


State 17

   24 jump: JEQ . jump_operand

    "*"      shift, and go to state 67
    "%"      shift, and go to state 68
    LITERAL  shift, and go to state 69
    SYMBOL   shift, and go to state 70

    jump_operand  go to state 72


State 18

   25 jump: JNE . jump_operand

    "*"      shift, and go to state 67
    "%"      shift, and go to state 68
    LITERAL  shift, and go to state 69
    SYMBOL   shift, and go to state 70

    jump_operand  go to state 73


State 19

   26 jump: JGT . jump_operand

    "*"      shift, and go to state 67
    "%"      shift, and go to state 68
    LITERAL  shift, and go to state 69
    SYMBOL   shift, and go to state 70

    jump_operand  go to state 74


State 20

   66 one_operand_instructions: PUSH . REGISTER

    REGISTER  shift, and go to state 75


State 21

   65 one_operand_instructions: POP . REGISTER

    REGISTER  shift, and go to state 76


State 22

   64 instruction_type: XCHG .

    $default  reduce using rule 64 (instruction_type)


State 23

   63 instruction_type: ADD .

    $default  reduce using rule 63 (instruction_type)


State 24

   62 instruction_type: SUB .

    $default  reduce using rule 62 (instruction_type)


State 25

   60 instruction_type: DIV .

    $default  reduce using rule 60 (instruction_type)


State 26

   61 instruction_type: MUL .

    $default  reduce using rule 61 (instruction_type)


State 27

   59 instruction_type: CMP .

    $default  reduce using rule 59 (instruction_type)


State 28

   67 one_operand_instructions: NOT . REGISTER

    REGISTER  shift, and go to state 77


State 29

   58 instruction_type: AND .

    $default  reduce using rule 58 (instruction_type)


State 30

   57 instruction_type: OR .

    $default  reduce using rule 57 (instruction_type)


State 31

   56 instruction_type: XOR .

    $default  reduce using rule 56 (instruction_type)


State 32

   55 instruction_type: TEST .

    $default  reduce using rule 55 (instruction_type)


State 33

   53 instruction_type: SHL .

    $default  reduce using rule 53 (instruction_type)


State 34

   54 instruction_type: SHR .

    $default  reduce using rule 54 (instruction_type)


State 35

   51 load_store: LDR .

    $default  reduce using rule 51 (load_store)


State 36

   52 load_store: STR .

    $default  reduce using rule 52 (load_store)


State 37

    7 line: COMMENT .

    $default  reduce using rule 7 (line)


State 38

    0 $accept: program . "end of file"
    1 program: program . line

    "end of file"  shift, and go to state 78
    GLOBAL         shift, and go to state 2
    EXTERN         shift, and go to state 3
    SECTION        shift, and go to state 4
    WORD           shift, and go to state 5
    SKIP           shift, and go to state 6
    ASCII          shift, and go to state 7
    EQU            shift, and go to state 8
    END            shift, and go to state 9
    SYMBOL         shift, and go to state 10
    HALT           shift, and go to state 11
    INT            shift, and go to state 12
    IRET           shift, and go to state 13
    RET            shift, and go to state 14
    CALL           shift, and go to state 15
    JMP            shift, and go to state 16
    JEQ            shift, and go to state 17
    JNE            shift, and go to state 18
    JGT            shift, and go to state 19
    PUSH           shift, and go to state 20
    POP            shift, and go to state 21
    XCHG           shift, and go to state 22
    ADD            shift, and go to state 23
    SUB            shift, and go to state 24
    DIV            shift, and go to state 25
    MUL            shift, and go to state 26
    CMP            shift, and go to state 27
    NOT            shift, and go to state 28
    AND            shift, and go to state 29
    OR             shift, and go to state 30
    XOR            shift, and go to state 31
    TEST           shift, and go to state 32
    SHL            shift, and go to state 33
    SHR            shift, and go to state 34
    LDR            shift, and go to state 35
    STR            shift, and go to state 36
    COMMENT        shift, and go to state 37

    line                       go to state 79
    directive                  go to state 40
    instruction                go to state 41
    load_store_instructions    go to state 42
    two_operand_instructions   go to state 43
    one_operand_instructions   go to state 44
    zero_operand_instructions  go to state 45
    jump                       go to state 46
    load_store                 go to state 47
    instruction_type           go to state 48


State 39

    2 program: line .

    $default  reduce using rule 2 (program)


State 40

    4 line: directive .

    $default  reduce using rule 4 (line)


State 41

    5 line: instruction .

    $default  reduce using rule 5 (line)


State 42

   39 two_operand_instructions: load_store_instructions .

    $default  reduce using rule 39 (two_operand_instructions)


State 43

   36 instruction: two_operand_instructions .

    $default  reduce using rule 36 (instruction)


State 44

   37 instruction: one_operand_instructions .

    $default  reduce using rule 37 (instruction)


State 45

   38 instruction: zero_operand_instructions .

    $default  reduce using rule 38 (instruction)


State 46

    6 line: jump .

    $default  reduce using rule 6 (line)


State 47

   41 load_store_instructions: load_store . REGISTER "," operand

    REGISTER  shift, and go to state 80


State 48

   40 two_operand_instructions: instruction_type . REGISTER "," REGISTER

    REGISTER  shift, and go to state 81


State 49

   18 symbol_list: SYMBOL .

    $default  reduce using rule 18 (symbol_list)


State 50

    8 directive: GLOBAL symbol_list .
   17 symbol_list: symbol_list . "," SYMBOL

    ","  shift, and go to state 82

    $default  reduce using rule 8 (directive)


State 51

    9 directive: EXTERN symbol_list .
   17 symbol_list: symbol_list . "," SYMBOL

    ","  shift, and go to state 82

    $default  reduce using rule 9 (directive)


State 52

   10 directive: SECTION SYMBOL .

    $default  reduce using rule 10 (directive)


State 53

   21 label_list: LITERAL .

    $default  reduce using rule 21 (label_list)


State 54

   22 label_list: SYMBOL .

    $default  reduce using rule 22 (label_list)


State 55

   11 directive: WORD label_list .
   19 label_list: label_list . "," SYMBOL
   20           | label_list . "," LITERAL

    ","  shift, and go to state 83

    $default  reduce using rule 11 (directive)


State 56

   12 directive: SKIP LITERAL .

    $default  reduce using rule 12 (directive)


State 57

   15 directive: EQU SYMBOL . "," LITERAL

    ","  shift, and go to state 84


State 58

   14 directive: SYMBOL ":" .

    $default  reduce using rule 14 (directive)


State 59

   68 one_operand_instructions: INT REGISTER .

    $default  reduce using rule 68 (one_operand_instructions)


State 60

   42 operand: "$" . LITERAL
   43        | "$" . SYMBOL

    LITERAL  shift, and go to state 85
    SYMBOL   shift, and go to state 86


State 61

   44 operand: "%" . SYMBOL

    SYMBOL  shift, and go to state 87


State 62

   48 operand: "[" . REGISTER "]"
   49        | "[" . REGISTER "+" LITERAL "]"
   50        | "[" . REGISTER "+" SYMBOL "]"

    REGISTER  shift, and go to state 88


State 63

   45 operand: LITERAL .

    $default  reduce using rule 45 (operand)


State 64

   46 operand: SYMBOL .

    $default  reduce using rule 46 (operand)


State 65

   47 operand: REGISTER .

    $default  reduce using rule 47 (operand)


State 66

   69 one_operand_instructions: CALL operand .

    $default  reduce using rule 69 (one_operand_instructions)


State 67

   30 jump_operand: "*" . LITERAL
   31             | "*" . SYMBOL
   32             | "*" . REGISTER
   33             | "*" . "[" REGISTER "]"
   34             | "*" . "[" REGISTER "+" LITERAL "]"
   35             | "*" . "[" REGISTER "+" SYMBOL "]"

    "["       shift, and go to state 89
    LITERAL   shift, and go to state 90
    SYMBOL    shift, and go to state 91
    REGISTER  shift, and go to state 92


State 68

   29 jump_operand: "%" . SYMBOL

    SYMBOL  shift, and go to state 93


State 69

   27 jump_operand: LITERAL .

    $default  reduce using rule 27 (jump_operand)


State 70

   28 jump_operand: SYMBOL .

    $default  reduce using rule 28 (jump_operand)


State 71

   23 jump: JMP jump_operand .

    $default  reduce using rule 23 (jump)


State 72

   24 jump: JEQ jump_operand .

    $default  reduce using rule 24 (jump)


State 73

   25 jump: JNE jump_operand .

    $default  reduce using rule 25 (jump)


State 74

   26 jump: JGT jump_operand .

    $default  reduce using rule 26 (jump)


State 75

   66 one_operand_instructions: PUSH REGISTER .

    $default  reduce using rule 66 (one_operand_instructions)


State 76

   65 one_operand_instructions: POP REGISTER .

    $default  reduce using rule 65 (one_operand_instructions)


State 77

   67 one_operand_instructions: NOT REGISTER .

    $default  reduce using rule 67 (one_operand_instructions)


State 78

    0 $accept: program "end of file" .

    $default  accept


State 79

    1 program: program line .

    $default  reduce using rule 1 (program)


State 80

   41 load_store_instructions: load_store REGISTER . "," operand

    ","  shift, and go to state 94


State 81

   40 two_operand_instructions: instruction_type REGISTER . "," REGISTER

    ","  shift, and go to state 95


State 82

   17 symbol_list: symbol_list "," . SYMBOL

    SYMBOL  shift, and go to state 96


State 83

   19 label_list: label_list "," . SYMBOL
   20           | label_list "," . LITERAL

    LITERAL  shift, and go to state 97
    SYMBOL   shift, and go to state 98


State 84

   15 directive: EQU SYMBOL "," . LITERAL

    LITERAL  shift, and go to state 99


State 85

   42 operand: "$" LITERAL .

    $default  reduce using rule 42 (operand)


State 86

   43 operand: "$" SYMBOL .

    $default  reduce using rule 43 (operand)


State 87

   44 operand: "%" SYMBOL .

    $default  reduce using rule 44 (operand)


State 88

   48 operand: "[" REGISTER . "]"
   49        | "[" REGISTER . "+" LITERAL "]"
   50        | "[" REGISTER . "+" SYMBOL "]"

    "+"  shift, and go to state 100
    "]"  shift, and go to state 101


State 89

   33 jump_operand: "*" "[" . REGISTER "]"
   34             | "*" "[" . REGISTER "+" LITERAL "]"
   35             | "*" "[" . REGISTER "+" SYMBOL "]"

    REGISTER  shift, and go to state 102


State 90

   30 jump_operand: "*" LITERAL .

    $default  reduce using rule 30 (jump_operand)


State 91

   31 jump_operand: "*" SYMBOL .

    $default  reduce using rule 31 (jump_operand)


State 92

   32 jump_operand: "*" REGISTER .

    $default  reduce using rule 32 (jump_operand)


State 93

   29 jump_operand: "%" SYMBOL .

    $default  reduce using rule 29 (jump_operand)


State 94

   41 load_store_instructions: load_store REGISTER "," . operand

    "$"       shift, and go to state 60
    "%"       shift, and go to state 61
    "["       shift, and go to state 62
    LITERAL   shift, and go to state 63
    SYMBOL    shift, and go to state 64
    REGISTER  shift, and go to state 65

    operand  go to state 103


State 95

   40 two_operand_instructions: instruction_type REGISTER "," . REGISTER

    REGISTER  shift, and go to state 104


State 96

   17 symbol_list: symbol_list "," SYMBOL .

    $default  reduce using rule 17 (symbol_list)


State 97

   20 label_list: label_list "," LITERAL .

    $default  reduce using rule 20 (label_list)


State 98

   19 label_list: label_list "," SYMBOL .

    $default  reduce using rule 19 (label_list)


State 99

   15 directive: EQU SYMBOL "," LITERAL .

    $default  reduce using rule 15 (directive)


State 100

   49 operand: "[" REGISTER "+" . LITERAL "]"
   50        | "[" REGISTER "+" . SYMBOL "]"

    LITERAL  shift, and go to state 105
    SYMBOL   shift, and go to state 106


State 101

   48 operand: "[" REGISTER "]" .

    $default  reduce using rule 48 (operand)


State 102

   33 jump_operand: "*" "[" REGISTER . "]"
   34             | "*" "[" REGISTER . "+" LITERAL "]"
   35             | "*" "[" REGISTER . "+" SYMBOL "]"

    "+"  shift, and go to state 107
    "]"  shift, and go to state 108


State 103

   41 load_store_instructions: load_store REGISTER "," operand .

    $default  reduce using rule 41 (load_store_instructions)


State 104

   40 two_operand_instructions: instruction_type REGISTER "," REGISTER .

    $default  reduce using rule 40 (two_operand_instructions)


State 105

   49 operand: "[" REGISTER "+" LITERAL . "]"

    "]"  shift, and go to state 109


State 106

   50 operand: "[" REGISTER "+" SYMBOL . "]"

    "]"  shift, and go to state 110


State 107

   34 jump_operand: "*" "[" REGISTER "+" . LITERAL "]"
   35             | "*" "[" REGISTER "+" . SYMBOL "]"

    LITERAL  shift, and go to state 111
    SYMBOL   shift, and go to state 112


State 108

   33 jump_operand: "*" "[" REGISTER "]" .

    $default  reduce using rule 33 (jump_operand)


State 109

   49 operand: "[" REGISTER "+" LITERAL "]" .

    $default  reduce using rule 49 (operand)


State 110

   50 operand: "[" REGISTER "+" SYMBOL "]" .

    $default  reduce using rule 50 (operand)


State 111

   34 jump_operand: "*" "[" REGISTER "+" LITERAL . "]"

    "]"  shift, and go to state 113


State 112

   35 jump_operand: "*" "[" REGISTER "+" SYMBOL . "]"

    "]"  shift, and go to state 114


State 113

   34 jump_operand: "*" "[" REGISTER "+" LITERAL "]" .

    $default  reduce using rule 34 (jump_operand)


State 114

   35 jump_operand: "*" "[" REGISTER "+" SYMBOL "]" .

    $default  reduce using rule 35 (jump_operand)
