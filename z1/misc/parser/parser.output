Terminals unused in grammar

    ":="
    "-"
    "/"
    "("
    ")"
    "#"
    ASCII
    EQU


Grammar

    0 $accept: program "end of file"

    1 program: program line
    2        | line
    3        | "end of file"

    4 line: directive
    5     | instruction
    6     | jump
    7     | COMMENT

    8 directive: GLOBAL symbol_list
    9          | EXTERN symbol_list
   10          | SECTION SYMBOL
   11          | WORD label_list
   12          | SKIP LITERAL
   13          | END
   14          | SYMBOL ":"

   15 symbol_list: symbol_list "," SYMBOL
   16            | SYMBOL

   17 label_list: label_list "," SYMBOL
   18           | label_list "," LITERAL
   19           | LITERAL
   20           | SYMBOL

   21 jump: JMP jump_operand
   22     | JEQ jump_operand
   23     | JNE jump_operand
   24     | JGT jump_operand

   25 jump_operand: LITERAL
   26             | SYMBOL
   27             | "%" SYMBOL
   28             | "*" LITERAL
   29             | "*" SYMBOL
   30             | "*" REGISTER
   31             | "*" "[" REGISTER "]"
   32             | "*" "[" REGISTER "+" LITERAL "]"
   33             | "*" "[" REGISTER "+" SYMBOL "]"

   34 instruction: two_operand_instructions
   35            | one_operand_instructions
   36            | zero_operand_instructions

   37 two_operand_instructions: load_store_instructions
   38                         | instruction_type REGISTER "," REGISTER

   39 load_store_instructions: load_store REGISTER "," operand

   40 operand: "$" LITERAL
   41        | "$" SYMBOL
   42        | "%" SYMBOL
   43        | LITERAL
   44        | SYMBOL
   45        | REGISTER
   46        | "[" REGISTER "]"
   47        | "[" REGISTER "+" LITERAL "]"
   48        | "[" REGISTER "+" SYMBOL "]"

   49 load_store: LDR
   50           | STR

   51 instruction_type: SHL
   52                 | SHR
   53                 | TEST
   54                 | XOR
   55                 | OR
   56                 | AND
   57                 | CMP
   58                 | DIV
   59                 | MUL
   60                 | SUB
   61                 | ADD
   62                 | XCHG

   63 one_operand_instructions: POP REGISTER
   64                         | PUSH REGISTER
   65                         | NOT REGISTER
   66                         | INT REGISTER
   67                         | CALL REGISTER

   68 zero_operand_instructions: RET
   69                          | IRET
   70                          | HALT


Terminals, with rules where they appear

    "end of file" (0) 0 3
    error (256)
    ":=" (258)
    "-" (259)
    "+" (260) 32 33 47 48
    "*" (261) 28 29 30 31 32 33
    "/" (262)
    "(" (263)
    ")" (264)
    "," (265) 15 17 18 38 39
    "$" (266) 40 41
    "%" (267) 27 42
    "[" (268) 31 32 33 46 47 48
    "]" (269) 31 32 33 46 47 48
    ":" (270) 14
    "#" (271)
    GLOBAL (272) 8
    EXTERN (273) 9
    SECTION (274) 10
    WORD (275) 11
    SKIP (276) 12
    ASCII (277)
    EQU (278)
    END (279) 13
    LITERAL <string> (280) 12 18 19 25 28 32 40 43 47
    SYMBOL <string> (281) 10 14 15 16 17 20 26 27 29 33 41 42 44 48
    REGISTER <string> (282) 30 31 32 33 38 39 45 46 47 48 63 64 65 66 67
    HALT (283) 70
    INT (284) 66
    IRET (285) 69
    RET (286) 68
    CALL (287) 67
    JMP (288) 21
    JEQ (289) 22
    JNE (290) 23
    JGT (291) 24
    PUSH (292) 64
    POP (293) 63
    XCHG (294) 62
    ADD (295) 61
    SUB (296) 60
    DIV (297) 58
    MUL (298) 59
    CMP (299) 57
    NOT (300) 65
    AND (301) 56
    OR (302) 55
    XOR (303) 54
    TEST (304) 53
    SHL (305) 51
    SHR (306) 52
    LDR (307) 49
    STR (308) 50
    COMMENT <string> (309) 7


Nonterminals, with rules where they appear

    $accept (55)
        on left: 0
    program (56)
        on left: 1 2 3
        on right: 0 1
    line (57)
        on left: 4 5 6 7
        on right: 1 2
    directive <Directive*> (58)
        on left: 8 9 10 11 12 13 14
        on right: 4
    instruction <Instruction*> (59)
        on left: 34 35 36
        on right: 5
    load_store_instructions <Instruction*> (60)
        on left: 39
        on right: 37
    two_operand_instructions <Instruction*> (61)
        on left: 37 38
        on right: 34
    one_operand_instructions <Instruction*> (62)
        on left: 63 64 65 66 67
        on right: 35
    zero_operand_instructions <Instruction*> (63)
        on left: 68 69 70
        on right: 36
    jump_operand <Jump*> (64)
        on left: 25 26 27 28 29 30 31 32 33
        on right: 21 22 23 24
    jump <Jump*> (65)
        on left: 21 22 23 24
        on right: 6
    symbol_list <vector<string>> (66)
        on left: 15 16
        on right: 8 9 15
    label_list <Directive*> (67)
        on left: 17 18 19 20
        on right: 11 17 18
    load_store <Instruction_type> (68)
        on left: 49 50
        on right: 39
    instruction_type <Instruction_type> (69)
        on left: 51 52 53 54 55 56 57 58 59 60 61 62
        on right: 38
    operand <Instruction*> (70)
        on left: 40 41 42 43 44 45 46 47 48
        on right: 39


State 0

    0 $accept: . program "end of file"

    "end of file"  shift, and go to state 1
    GLOBAL         shift, and go to state 2
    EXTERN         shift, and go to state 3
    SECTION        shift, and go to state 4
    WORD           shift, and go to state 5
    SKIP           shift, and go to state 6
    END            shift, and go to state 7
    SYMBOL         shift, and go to state 8
    HALT           shift, and go to state 9
    INT            shift, and go to state 10
    IRET           shift, and go to state 11
    RET            shift, and go to state 12
    CALL           shift, and go to state 13
    JMP            shift, and go to state 14
    JEQ            shift, and go to state 15
    JNE            shift, and go to state 16
    JGT            shift, and go to state 17
    PUSH           shift, and go to state 18
    POP            shift, and go to state 19
    XCHG           shift, and go to state 20
    ADD            shift, and go to state 21
    SUB            shift, and go to state 22
    DIV            shift, and go to state 23
    MUL            shift, and go to state 24
    CMP            shift, and go to state 25
    NOT            shift, and go to state 26
    AND            shift, and go to state 27
    OR             shift, and go to state 28
    XOR            shift, and go to state 29
    TEST           shift, and go to state 30
    SHL            shift, and go to state 31
    SHR            shift, and go to state 32
    LDR            shift, and go to state 33
    STR            shift, and go to state 34
    COMMENT        shift, and go to state 35

    program                    go to state 36
    line                       go to state 37
    directive                  go to state 38
    instruction                go to state 39
    load_store_instructions    go to state 40
    two_operand_instructions   go to state 41
    one_operand_instructions   go to state 42
    zero_operand_instructions  go to state 43
    jump                       go to state 44
    load_store                 go to state 45
    instruction_type           go to state 46


State 1

    3 program: "end of file" .

    $default  reduce using rule 3 (program)


State 2

    8 directive: GLOBAL . symbol_list

    SYMBOL  shift, and go to state 47

    symbol_list  go to state 48


State 3

    9 directive: EXTERN . symbol_list

    SYMBOL  shift, and go to state 47

    symbol_list  go to state 49


State 4

   10 directive: SECTION . SYMBOL

    SYMBOL  shift, and go to state 50


State 5

   11 directive: WORD . label_list

    LITERAL  shift, and go to state 51
    SYMBOL   shift, and go to state 52

    label_list  go to state 53


State 6

   12 directive: SKIP . LITERAL

    LITERAL  shift, and go to state 54


State 7

   13 directive: END .

    $default  reduce using rule 13 (directive)


State 8

   14 directive: SYMBOL . ":"

    ":"  shift, and go to state 55


State 9

   70 zero_operand_instructions: HALT .

    $default  reduce using rule 70 (zero_operand_instructions)


State 10

   66 one_operand_instructions: INT . REGISTER

    REGISTER  shift, and go to state 56


State 11

   69 zero_operand_instructions: IRET .

    $default  reduce using rule 69 (zero_operand_instructions)


State 12

   68 zero_operand_instructions: RET .

    $default  reduce using rule 68 (zero_operand_instructions)


State 13

   67 one_operand_instructions: CALL . REGISTER

    REGISTER  shift, and go to state 57


State 14

   21 jump: JMP . jump_operand

    "*"      shift, and go to state 58
    "%"      shift, and go to state 59
    LITERAL  shift, and go to state 60
    SYMBOL   shift, and go to state 61

    jump_operand  go to state 62


State 15

   22 jump: JEQ . jump_operand

    "*"      shift, and go to state 58
    "%"      shift, and go to state 59
    LITERAL  shift, and go to state 60
    SYMBOL   shift, and go to state 61

    jump_operand  go to state 63


State 16

   23 jump: JNE . jump_operand

    "*"      shift, and go to state 58
    "%"      shift, and go to state 59
    LITERAL  shift, and go to state 60
    SYMBOL   shift, and go to state 61

    jump_operand  go to state 64


State 17

   24 jump: JGT . jump_operand

    "*"      shift, and go to state 58
    "%"      shift, and go to state 59
    LITERAL  shift, and go to state 60
    SYMBOL   shift, and go to state 61

    jump_operand  go to state 65


State 18

   64 one_operand_instructions: PUSH . REGISTER

    REGISTER  shift, and go to state 66


State 19

   63 one_operand_instructions: POP . REGISTER

    REGISTER  shift, and go to state 67


State 20

   62 instruction_type: XCHG .

    $default  reduce using rule 62 (instruction_type)


State 21

   61 instruction_type: ADD .

    $default  reduce using rule 61 (instruction_type)


State 22

   60 instruction_type: SUB .

    $default  reduce using rule 60 (instruction_type)


State 23

   58 instruction_type: DIV .

    $default  reduce using rule 58 (instruction_type)


State 24

   59 instruction_type: MUL .

    $default  reduce using rule 59 (instruction_type)


State 25

   57 instruction_type: CMP .

    $default  reduce using rule 57 (instruction_type)


State 26

   65 one_operand_instructions: NOT . REGISTER

    REGISTER  shift, and go to state 68


State 27

   56 instruction_type: AND .

    $default  reduce using rule 56 (instruction_type)


State 28

   55 instruction_type: OR .

    $default  reduce using rule 55 (instruction_type)


State 29

   54 instruction_type: XOR .

    $default  reduce using rule 54 (instruction_type)


State 30

   53 instruction_type: TEST .

    $default  reduce using rule 53 (instruction_type)


State 31

   51 instruction_type: SHL .

    $default  reduce using rule 51 (instruction_type)


State 32

   52 instruction_type: SHR .

    $default  reduce using rule 52 (instruction_type)


State 33

   49 load_store: LDR .

    $default  reduce using rule 49 (load_store)


State 34

   50 load_store: STR .

    $default  reduce using rule 50 (load_store)


State 35

    7 line: COMMENT .

    $default  reduce using rule 7 (line)


State 36

    0 $accept: program . "end of file"
    1 program: program . line

    "end of file"  shift, and go to state 69
    GLOBAL         shift, and go to state 2
    EXTERN         shift, and go to state 3
    SECTION        shift, and go to state 4
    WORD           shift, and go to state 5
    SKIP           shift, and go to state 6
    END            shift, and go to state 7
    SYMBOL         shift, and go to state 8
    HALT           shift, and go to state 9
    INT            shift, and go to state 10
    IRET           shift, and go to state 11
    RET            shift, and go to state 12
    CALL           shift, and go to state 13
    JMP            shift, and go to state 14
    JEQ            shift, and go to state 15
    JNE            shift, and go to state 16
    JGT            shift, and go to state 17
    PUSH           shift, and go to state 18
    POP            shift, and go to state 19
    XCHG           shift, and go to state 20
    ADD            shift, and go to state 21
    SUB            shift, and go to state 22
    DIV            shift, and go to state 23
    MUL            shift, and go to state 24
    CMP            shift, and go to state 25
    NOT            shift, and go to state 26
    AND            shift, and go to state 27
    OR             shift, and go to state 28
    XOR            shift, and go to state 29
    TEST           shift, and go to state 30
    SHL            shift, and go to state 31
    SHR            shift, and go to state 32
    LDR            shift, and go to state 33
    STR            shift, and go to state 34
    COMMENT        shift, and go to state 35

    line                       go to state 70
    directive                  go to state 38
    instruction                go to state 39
    load_store_instructions    go to state 40
    two_operand_instructions   go to state 41
    one_operand_instructions   go to state 42
    zero_operand_instructions  go to state 43
    jump                       go to state 44
    load_store                 go to state 45
    instruction_type           go to state 46


State 37

    2 program: line .

    $default  reduce using rule 2 (program)


State 38

    4 line: directive .

    $default  reduce using rule 4 (line)


State 39

    5 line: instruction .

    $default  reduce using rule 5 (line)


State 40

   37 two_operand_instructions: load_store_instructions .

    $default  reduce using rule 37 (two_operand_instructions)


State 41

   34 instruction: two_operand_instructions .

    $default  reduce using rule 34 (instruction)


State 42

   35 instruction: one_operand_instructions .

    $default  reduce using rule 35 (instruction)


State 43

   36 instruction: zero_operand_instructions .

    $default  reduce using rule 36 (instruction)


State 44

    6 line: jump .

    $default  reduce using rule 6 (line)


State 45

   39 load_store_instructions: load_store . REGISTER "," operand

    REGISTER  shift, and go to state 71


State 46

   38 two_operand_instructions: instruction_type . REGISTER "," REGISTER

    REGISTER  shift, and go to state 72


State 47

   16 symbol_list: SYMBOL .

    $default  reduce using rule 16 (symbol_list)


State 48

    8 directive: GLOBAL symbol_list .
   15 symbol_list: symbol_list . "," SYMBOL

    ","  shift, and go to state 73

    $default  reduce using rule 8 (directive)


State 49

    9 directive: EXTERN symbol_list .
   15 symbol_list: symbol_list . "," SYMBOL

    ","  shift, and go to state 73

    $default  reduce using rule 9 (directive)


State 50

   10 directive: SECTION SYMBOL .

    $default  reduce using rule 10 (directive)


State 51

   19 label_list: LITERAL .

    $default  reduce using rule 19 (label_list)


State 52

   20 label_list: SYMBOL .

    $default  reduce using rule 20 (label_list)


State 53

   11 directive: WORD label_list .
   17 label_list: label_list . "," SYMBOL
   18           | label_list . "," LITERAL

    ","  shift, and go to state 74

    $default  reduce using rule 11 (directive)


State 54

   12 directive: SKIP LITERAL .

    $default  reduce using rule 12 (directive)


State 55

   14 directive: SYMBOL ":" .

    $default  reduce using rule 14 (directive)


State 56

   66 one_operand_instructions: INT REGISTER .

    $default  reduce using rule 66 (one_operand_instructions)


State 57

   67 one_operand_instructions: CALL REGISTER .

    $default  reduce using rule 67 (one_operand_instructions)


State 58

   28 jump_operand: "*" . LITERAL
   29             | "*" . SYMBOL
   30             | "*" . REGISTER
   31             | "*" . "[" REGISTER "]"
   32             | "*" . "[" REGISTER "+" LITERAL "]"
   33             | "*" . "[" REGISTER "+" SYMBOL "]"

    "["       shift, and go to state 75
    LITERAL   shift, and go to state 76
    SYMBOL    shift, and go to state 77
    REGISTER  shift, and go to state 78


State 59

   27 jump_operand: "%" . SYMBOL

    SYMBOL  shift, and go to state 79


State 60

   25 jump_operand: LITERAL .

    $default  reduce using rule 25 (jump_operand)


State 61

   26 jump_operand: SYMBOL .

    $default  reduce using rule 26 (jump_operand)


State 62

   21 jump: JMP jump_operand .

    $default  reduce using rule 21 (jump)


State 63

   22 jump: JEQ jump_operand .

    $default  reduce using rule 22 (jump)


State 64

   23 jump: JNE jump_operand .

    $default  reduce using rule 23 (jump)


State 65

   24 jump: JGT jump_operand .

    $default  reduce using rule 24 (jump)


State 66

   64 one_operand_instructions: PUSH REGISTER .

    $default  reduce using rule 64 (one_operand_instructions)


State 67

   63 one_operand_instructions: POP REGISTER .

    $default  reduce using rule 63 (one_operand_instructions)


State 68

   65 one_operand_instructions: NOT REGISTER .

    $default  reduce using rule 65 (one_operand_instructions)


State 69

    0 $accept: program "end of file" .

    $default  accept


State 70

    1 program: program line .

    $default  reduce using rule 1 (program)


State 71

   39 load_store_instructions: load_store REGISTER . "," operand

    ","  shift, and go to state 80


State 72

   38 two_operand_instructions: instruction_type REGISTER . "," REGISTER

    ","  shift, and go to state 81


State 73

   15 symbol_list: symbol_list "," . SYMBOL

    SYMBOL  shift, and go to state 82


State 74

   17 label_list: label_list "," . SYMBOL
   18           | label_list "," . LITERAL

    LITERAL  shift, and go to state 83
    SYMBOL   shift, and go to state 84


State 75

   31 jump_operand: "*" "[" . REGISTER "]"
   32             | "*" "[" . REGISTER "+" LITERAL "]"
   33             | "*" "[" . REGISTER "+" SYMBOL "]"

    REGISTER  shift, and go to state 85


State 76

   28 jump_operand: "*" LITERAL .

    $default  reduce using rule 28 (jump_operand)


State 77

   29 jump_operand: "*" SYMBOL .

    $default  reduce using rule 29 (jump_operand)


State 78

   30 jump_operand: "*" REGISTER .

    $default  reduce using rule 30 (jump_operand)


State 79

   27 jump_operand: "%" SYMBOL .

    $default  reduce using rule 27 (jump_operand)


State 80

   39 load_store_instructions: load_store REGISTER "," . operand

    "$"       shift, and go to state 86
    "%"       shift, and go to state 87
    "["       shift, and go to state 88
    LITERAL   shift, and go to state 89
    SYMBOL    shift, and go to state 90
    REGISTER  shift, and go to state 91

    operand  go to state 92


State 81

   38 two_operand_instructions: instruction_type REGISTER "," . REGISTER

    REGISTER  shift, and go to state 93


State 82

   15 symbol_list: symbol_list "," SYMBOL .

    $default  reduce using rule 15 (symbol_list)


State 83

   18 label_list: label_list "," LITERAL .

    $default  reduce using rule 18 (label_list)


State 84

   17 label_list: label_list "," SYMBOL .

    $default  reduce using rule 17 (label_list)


State 85

   31 jump_operand: "*" "[" REGISTER . "]"
   32             | "*" "[" REGISTER . "+" LITERAL "]"
   33             | "*" "[" REGISTER . "+" SYMBOL "]"

    "+"  shift, and go to state 94
    "]"  shift, and go to state 95


State 86

   40 operand: "$" . LITERAL
   41        | "$" . SYMBOL

    LITERAL  shift, and go to state 96
    SYMBOL   shift, and go to state 97


State 87

   42 operand: "%" . SYMBOL

    SYMBOL  shift, and go to state 98


State 88

   46 operand: "[" . REGISTER "]"
   47        | "[" . REGISTER "+" LITERAL "]"
   48        | "[" . REGISTER "+" SYMBOL "]"

    REGISTER  shift, and go to state 99


State 89

   43 operand: LITERAL .

    $default  reduce using rule 43 (operand)


State 90

   44 operand: SYMBOL .

    $default  reduce using rule 44 (operand)


State 91

   45 operand: REGISTER .

    $default  reduce using rule 45 (operand)


State 92

   39 load_store_instructions: load_store REGISTER "," operand .

    $default  reduce using rule 39 (load_store_instructions)


State 93

   38 two_operand_instructions: instruction_type REGISTER "," REGISTER .

    $default  reduce using rule 38 (two_operand_instructions)


State 94

   32 jump_operand: "*" "[" REGISTER "+" . LITERAL "]"
   33             | "*" "[" REGISTER "+" . SYMBOL "]"

    LITERAL  shift, and go to state 100
    SYMBOL   shift, and go to state 101


State 95

   31 jump_operand: "*" "[" REGISTER "]" .

    $default  reduce using rule 31 (jump_operand)


State 96

   40 operand: "$" LITERAL .

    $default  reduce using rule 40 (operand)


State 97

   41 operand: "$" SYMBOL .

    $default  reduce using rule 41 (operand)


State 98

   42 operand: "%" SYMBOL .

    $default  reduce using rule 42 (operand)


State 99

   46 operand: "[" REGISTER . "]"
   47        | "[" REGISTER . "+" LITERAL "]"
   48        | "[" REGISTER . "+" SYMBOL "]"

    "+"  shift, and go to state 102
    "]"  shift, and go to state 103


State 100

   32 jump_operand: "*" "[" REGISTER "+" LITERAL . "]"

    "]"  shift, and go to state 104


State 101

   33 jump_operand: "*" "[" REGISTER "+" SYMBOL . "]"

    "]"  shift, and go to state 105


State 102

   47 operand: "[" REGISTER "+" . LITERAL "]"
   48        | "[" REGISTER "+" . SYMBOL "]"

    LITERAL  shift, and go to state 106
    SYMBOL   shift, and go to state 107


State 103

   46 operand: "[" REGISTER "]" .

    $default  reduce using rule 46 (operand)


State 104

   32 jump_operand: "*" "[" REGISTER "+" LITERAL "]" .

    $default  reduce using rule 32 (jump_operand)


State 105

   33 jump_operand: "*" "[" REGISTER "+" SYMBOL "]" .

    $default  reduce using rule 33 (jump_operand)


State 106

   47 operand: "[" REGISTER "+" LITERAL . "]"

    "]"  shift, and go to state 108


State 107

   48 operand: "[" REGISTER "+" SYMBOL . "]"

    "]"  shift, and go to state 109


State 108

   47 operand: "[" REGISTER "+" LITERAL "]" .

    $default  reduce using rule 47 (operand)


State 109

   48 operand: "[" REGISTER "+" SYMBOL "]" .

    $default  reduce using rule 48 (operand)
